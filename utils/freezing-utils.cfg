#textdomain wesnoth-War_of_the_Jewel

#define SHELTERING_TILES
Cea, Kea, Cwr, Kwr, Cw, Kw, *^V* #enddef

#define FREEZING_TILES
Aa, Tyb, Ha, Ai, Ms, Wwg, Wog #enddef

#define FREEZING_UNITS_FILTER
    [not]
        race=undead
    [/not]
    [not]
        race=elemental
    [/not]
    [not]
        race=aragwaith
    [/not]
    [not]
        race=mechanical
    [/not]
    [not]
        type=Yeti
    [/not]
    [not]
        id=Mahyus
    [/not]
    [not]
        id=Nyx
    [/not]
    [not]
        race=windsong
    [/not]
    [not]
        # flameheart amulet wielders
        role=immune
    [/not]
    [not]
        # prevent AI units from being depleted
        # by freezing before the player shows up
        ai_special=guardian
    [/not]
#enddef

# This freezes the given units. However, if the unit is adjacent to a
# friendly healer, the freezing will be delayed instead: the unit suffers no
# ill effects, but it cannot receive any healing on this turn either. Basically,
# freezing works just like poison.
#
# Each turn of freezing lowers the unitâ€™s attack damage by 1 point and
# decreases hitpoints by -$freezing_loss.

#define APPLY_FREEZING_EFFECT FILTER
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill=no
        variable=freezing_units
    [/store_unit]

    {FOREACH freezing_units i}
        {VARIABLE freezing_units[$i].resting no}

        [if]
            [have_unit]
                x,y=$freezing_units[$i].x,$freezing_units[$i].y

                [filter_adjacent]
                    is_enemy=no
                    [and]
                        ability=healing
                        [or]
                            ability=curing
                        [/or]
                    [/and]
                [/filter_adjacent]
            [/have_unit]

            [then]
                {VARIABLE freezing_units[$i].status.freezing_slowed_by_healer yes}

                [unstore_unit]
                    variable=freezing_units[$i]
                    find_vacant=no
                [/unstore_unit]
            [/then]

            [else]
                {FOREACH freezing_units[$i].attack j}
                    # if freezing for the first time, store the original attack stats
                    [if]
                        [variable]
                            name=freezing_units[$i].status.frozen
                            not_equals=yes
                        [/variable]

                        [then]
                            {VARIABLE freezing_units[$i].variables.original_attack[$j].damage $freezing_units[$i].attack[$j].damage}
                        [/then]
                    [/if]

                    # the attack's damage drops by 1 point, but cannot drop to zero
                    [if]
                        [variable]
                            name=freezing_units[$i].attack[$j].damage
                            greater_than=1
                        [/variable]

                        [then]
                            {VARIABLE_OP freezing_units[$i].attack[$j].damage sub 1}
                        [/then]
                    [/if]
                {NEXT j}

                # unit's hitpoints drop by $freezing_loss, but cannot kill it
                [if]
                    [variable]
                        name=freezing_units[$i].hitpoints
                        greater_than=$freezing_loss
                    [/variable]

                    [then]
                        {VARIABLE_OP freezing_units[$i].hitpoints sub $freezing_loss}
                    [/then]

                    [else]
                        {VARIABLE freezing_units[$i].hitpoints 1}
                    [/else]
                [/if]

                {VARIABLE freezing_units[$i].status.frozen yes}

                [unstore_unit]
                    variable=freezing_units[$i]
                    find_vacant=no
                    text= _ "freezing"
                    {COLOR_HARM}
                [/unstore_unit]

                [unit_overlay]
                    x,y=$freezing_units[$i].x,$freezing_units[$i].y
                    image=halo/freezing-icon.png
                [/unit_overlay]
            [/else]
        [/if]
    {NEXT i}

    {CLEAR_VARIABLE freezing_units}
#enddef

# This rehydrates the given units. The units gain back their full attack damage.
#define APPLY_WARMING_EFFECT FILTER
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill=no
        variable=warming_units
    [/store_unit]

    {FOREACH warming_units i}
        [if]
            [variable]
                name=warming_units[$i].status.frozen
                equals=yes
            [/variable]

            [then]
                {FOREACH warming_units[$i].attack j}
                    {VARIABLE warming_units[$i].attack[$j].damage $warming_units[$i].variables.original_attack[$j].damage}
                {NEXT j}
            [/then]
        [/if]

        {VARIABLE warming_units[$i].status.frozen no}

        [unstore_unit]
            variable=warming_units[$i]
            find_vacant=no
            text= _ "warmed"
            {COLOR_HEAL}
        [/unstore_unit]

        [remove_unit_overlay]
            x,y=$warming_units[$i].x,$warming_units[$i].y
            image=halo/freezing-icon.png
        [/remove_unit_overlay]
    {NEXT i}

    {CLEAR_VARIABLE warming_units}
#enddef

#
# Events
#

[event]
    name=preload
    first_time_only=no
    [lua]
        code=<<
            local _ = wesnoth.textdomain "wesnoth-War_of_the_Jewel"
            local old_unit_status = wesnoth.theme_items.unit_status
            function wesnoth.theme_items.unit_status()
                local u = wesnoth.get_displayed_unit()
                if not u then return {} end
                local s = old_unit_status()
                if u.status.frozen then
                    table.insert(s, { "element", {
                        image = "halo/freezing-status.png",
                        tooltip = _"frozen: This unit is freezing. It will lose 2 HP and have its damage reduced by 1 each turn unless prevented by healers or shelter at a village, a keep or a castle.\n\nUnits cannot be killed or deal no damage as a result of freezing."
                    } })
                end
                return s
            end
        >>
    [/lua]
[/event]

[event]
    name=prestart

    # freezing loss - a variable for the dialogue
    {VARIABLE freezing_loss 2}
[/event]

[event]
    name=side turn
    first_time_only=no

    {APPLY_FREEZING_EFFECT (
        side=$side_number
        {FREEZING_UNITS_FILTER}

        [filter_location]
            terrain={FREEZING_TILES}
        [/filter_location]
    )}
[/event]

[event]
    name=side turn
    first_time_only=no

    # warming in castles, keeps, villages or when next to healers
    {APPLY_WARMING_EFFECT (
        side=$side_number
        [filter_wml]
            [status]
                frozen=yes
            [/status]
        [/filter_wml]
        {FREEZING_UNITS_FILTER}

        [and]
            [filter_location]
                terrain={SHELTERING_TILES}
            [/filter_location]
        [/and]
    )}
[/event]

[event]
    name=turn refresh
    first_time_only=no

    [if]
        [variable]
            name=side_number
            equals=1
        [/variable]

        [then]
            {MODIFY_UNIT (
                side=1
                [filter_wml]
                    [status]
                        freezing_slowed_by_healer=yes
                    [/status]
                [/filter_wml]
            ) status.freezing_slowed_by_healer no}
        [/then]
    [/if]
[/event]

[event]
    name=advance
    first_time_only=no

    [filter]
        [filter_wml]
            [status]
                frozen=yes
            [/status]
        [/filter_wml]
    [/filter]

    {VARIABLE unit.status.frozen no}

    [unstore_unit]
        variable=unit
        find_vacant=no
        text= _ "warmed"
        {COLOR_HEAL}
        advance=no
    [/unstore_unit]

    [remove_unit_overlay]
        x,y=$unit.x,$unit.y
        image=halo/freezing-icon.png
    [/remove_unit_overlay]
[/event]

[event]
    name=victory

    # Warm all units for the next scenario
    # Do this more quietly than usual...
    [store_unit]
        [filter]
            side=1
        [/filter]

        kill=no
        variable=warming_units
    [/store_unit]

    {FOREACH warming_units i}
        [if]
            [variable]
                name=warming_units[$i].status.frozen
                equals=yes
            [/variable]

            [then]
                {FOREACH warming_units[$i].attack j}
                    {VARIABLE warming_units[$i].attack[$j].damage $warming_units[$i].variables.original_attack[$j].damage}
                {NEXT j}
            [/then]
        [/if]

        {VARIABLE warming_units[$i].status.frozen no}

        [unstore_unit]
            variable=warming_units[$i]
            find_vacant=no
        [/unstore_unit]

        [remove_unit_overlay]
            id=$warming_units[$i].id
            image=halo/freezing-icon.png
        [/remove_unit_overlay]
    {NEXT i}

    [for]
        array=warming_units
        [do]
            [if]
                [variable]
                    name=warming_units[$i].status.frozen
                    equals=yes
                [/variable]

                [then]
                    [for]
                        array=warming_units[$i].attack
                        variable=j
                        [do]
                            {VARIABLE warming_units[$i].attack[$j].damage $warming_units[$i].variables.original_attack[$j].damage}
                        [/do]
                    [/for]
                [/then]
            [/if]

            {VARIABLE warming_units[$i].status.frozen no}

            [unstore_unit]
                variable=warming_units[$i]
                find_vacant=no
            [/unstore_unit]

            [remove_unit_overlay]
                id=$warming_units[$i].id
                image=halo/freezing-icon.png
            [/remove_unit_overlay]
        [/do]
    [/for]

    # Clear related variables
    {CLEAR_VARIABLE warming_units}
    {CLEAR_VARIABLE freezing_loss}
[/event]
